
#include <FastLED.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

#define NUM_LEDS 256
#define DATA_PIN 9
#define CLOCK_PIN 13

CRGB leds[NUM_LEDS];

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUM_LEDS, DATA_PIN, NEO_GRB + NEO_KHZ800);

int delayval = 40;
int anInterval = 250;


int state = 0;
boolean currentState = false;
boolean previousState = false;
int buttonPin = 11;

#include <avr/pgmspace.h>


const long DigDug01[] PROGMEM = {
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000,
  0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0066cc, 0x000000, 0x0066cc, 0x000000, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000,
  0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x000000, 0x0066cc, 0x000000, 0x0066cc, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0xff0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff0000, 0xff0000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x0066cc, 0x0066cc, 0xcccccc, 0x000000, 0x000000,
  0x000000, 0xff0000, 0xff0000, 0xff0000, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000,
  0x000000, 0x000000, 0xff0000, 0xff0000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0x0066cc, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0xff0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0x000000, 0x000000,
  0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long DigDug02[] PROGMEM = {
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000,
  0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x0066cc, 0x000000, 0x0066cc, 0x000000, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000,
  0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x000000, 0x0066cc, 0x000000, 0x0066cc, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000,
  0x000000, 0x000000, 0x000000, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0xff0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x0066cc, 0x0066cc, 0xcccccc, 0x000000, 0x000000,
  0x000000, 0xff0000, 0xff0000, 0xff0000, 0x0066cc, 0x0066cc, 0x0066cc, 0x0066cc, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000,
  0x000000, 0x000000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0x0066cc, 0x0066cc, 0x0066cc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xcccccc, 0xcccccc, 0xcccccc, 0xcccccc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long Qbert01[] PROGMEM = {
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffcc, 0xffffcc, 0xff0033, 0xffffcc, 0xffffcc, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0xff0033,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033,
  0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000033, 0x000033, 0xff6600, 0x000000,
  0x000000, 0xff0033, 0x000033, 0x000033, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000
};

const long Qbert02[] PROGMEM = {
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xffffff, 0xffffff, 0xff0033, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0xff0033, 0x000000,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033,
  0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000,
  0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff6600, 0xff0033, 0xff0033,
  0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff6600, 0xff0033, 0xff0033, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000, 0xff6600, 0x000000,
  0x000000, 0xff0033, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0xff0033, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000, 0xff0033, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0x000000, 0x000000, 0xff0033, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0xff6600, 0xff6600, 0xff6600, 0xff0033, 0x000000, 0x000000, 0x000000
};

const long BombJack01[] PROGMEM = {
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0xffffff, 0x0099ff, 0xffffff, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0xffffff, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffffff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x333366, 0x333366,
  0x333366, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x333366, 0x333366,
  0x333366, 0x333366, 0x000000, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0xffff00, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x000000, 0x333366,
  0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x333366, 0x333366, 0x333366
};

const long BombJack02[] PROGMEM = {
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x0099ff, 0x0099ff, 0xffffff, 0x000000, 0x0099ff, 0x000000, 0xffffff, 0x0099ff, 0x0099ff, 0x333366, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0x000000, 0x000000, 0x333366, 0x0099ff, 0xffffff, 0xffffff, 0xffcc99, 0xffffff, 0xffffff, 0x0099ff, 0x333366, 0x000000, 0x000000, 0x333366,
  0x333366, 0x000000, 0x000000, 0xff0000, 0xffcc99, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffcc99, 0xff0000, 0x000000, 0x000000, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffcc99, 0xffffff, 0xff0000, 0xff0000, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0x333366, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0xffffff, 0xffffff, 0xffffff, 0x0099ff, 0x0099ff, 0x0099ff, 0xffff00, 0x0099ff, 0x0099ff, 0x0099ff, 0xffffff, 0xffffff, 0xffffff, 0x333366,
  0x333366, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x333366,
  0x333366, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff,
  0x333366, 0x333366, 0x333366, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xffffff, 0x333366, 0xffffff, 0xffffff, 0x333366, 0x333366,
  0x333366, 0x333366, 0x333366, 0x333366, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x000000, 0x000000, 0x000000, 0x333366, 0x333366, 0x333366, 0x333366
};


const long PIG01[] PROGMEM = {
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xbd5ebe, 0xbd5ebe, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff
};

const long PIG02[] PROGMEM = {
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xffffff, 0xffffff, 0x000000, 0x000000, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0x000000, 0x000000, 0xffffff, 0xffffff,
  0xffffff, 0xffffff, 0x000000, 0x000000, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0x000000, 0x000000, 0xffffff, 0xffffff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xbd5ebe, 0xbd5ebe, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xeeb0ef, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff,
  0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff, 0xfc00ff
};

const long CHRISTMAS01[] PROGMEM = {
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16,
  0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16
};

const long CHRISTMAS02[] PROGMEM = {
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000,
  0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000, 0x00ff16, 0xff0000
};

const long SYMBOL01[] PROGMEM = {
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0xffcf06,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
};

const long SYMBOL02[] PROGMEM = {
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
  0x2d62,
};







void setup() {

  Serial.begin(57600);

  //Serial.println("resetting");
  LEDS.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  LEDS.setBrightness(84);
  pinMode(buttonPin, INPUT);

#if defined(__AVR_ATtiny85__)
  if (F_CPU == 16000000) clock_prescale_set(clock_div_1);
#endif

  pixels.begin();  // This initializes the NeoP

  // FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);  // Init of the Fastled library
  // FastLED.setBrightness(15);
}



void fadeall() {
  for (int i = 0; i < NUM_LEDS; i++) { leds[i].nscale8(250); }
}

void loop() {

  // Serial.println("DDDD");

  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
  }
  if (state >11) {
    state = 0;
  }

  Serial.println(state);

  switch (state) {
    case 0:
      pixels.clear();
      rainbowLines();
      pixels.show();
      break;

    case 1:
      animationOne();
      break;

    case 2:
      FastLED.clear();
      greenLines(pixels.Color(42, 229, 19));
      break;

    case 3:
      animationTwo();
      break;

    case 4:
      FastLED.clear();
      greenLines(pixels.Color(21, 218, 255));
      break;

    case 5:
      animationThree();
      break;

    case 6:
      FastLED.clear();
      greenLines(pixels.Color(242, 173, 44));
      break;

    case 7:
      animationFour();
      break;

    case 8:
      FastLED.clear();
      greenLines(pixels.Color(34, 255, 0));
      break;

    case 9:
      animationFive();
      break;

    case 10:
      FastLED.clear();
      greenLines(pixels.Color(255, 0, 225));
      break;

    case 11:
      animationSix();
      break;
  }
}
void greenLines(uint32_t linesColor) {

  for (int i = 0; i < NUM_LEDS; i++) {
    Serial.println("test");

    // pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
    pixels.setPixelColor(i, linesColor);  // Moderately bright green color.
    leds[i] = linesColor;

    FastLED.show();  // This sends the updated pixel color to the hardware.

    delay(delayval);  // Delay for a period of time (in milliseconds).

    previousState = currentState;
    currentState = debounce(buttonPin, previousState);

    if (currentState == true && previousState == false) {
      state++;
      if (state > 11) {
        state = 0;
      }

      return;
    }
  }
}

void animationOne() {

  static int stateAnimationOne = 0;
  static unsigned long startTime = millis();
  unsigned long currentTime = millis();
  //for (int passtime = 0; passtime < 8; passtime++) {  // Display it 8 times
  switch (stateAnimationOne) {
    case 0:

      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(DigDug01[i]));  // Read array from Flash
      }
      FastLED.show();
      break;



    case 1:
      //Put Qbert second frame
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(DigDug02[i]));
      }
      FastLED.show();
      break;
  }

  if (currentTime - startTime >= anInterval) {

    stateAnimationOne += 1;
    if (stateAnimationOne >= 2) {

      stateAnimationOne = 0;
    }
    startTime = millis();
  }


  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
    FastLED.clear();

    if (state > 11) {
      state = 0;
    }
    return;
  }
}

void animationTwo() {

  static int stateAnimationTwo = 0;
  static unsigned long startTime = millis();
  unsigned long currentTime = millis();
  //for (int passtime = 0; passtime < 8; passtime++) {  // Display it 8 times
  switch (stateAnimationTwo) {
    case 0:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Qbert01[i]));
      }
      FastLED.show();
      break;



    case 1:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(Qbert02[i]));
      }
      FastLED.show();
      break;
  }

  if (currentTime - startTime >= anInterval) {

    stateAnimationTwo += 1;
    if (stateAnimationTwo >= 2) {

      stateAnimationTwo = 0;
    }
    startTime = millis();
  }


  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
    FastLED.clear();

    if (state > 11) {
      state = 0;
    }
    return;
  }
}

void animationThree() {

  static int stateAnimationThree = 0;
  static unsigned long startTime = millis();
  unsigned long currentTime = millis();
  //for (int passtime = 0; passtime < 8; passtime++) {  // Display it 8 times
  switch (stateAnimationThree) {
    case 0:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BombJack01[i]));
      }
      FastLED.show();
      break;



    case 1:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(BombJack02[i]));
      }
      FastLED.show();
      break;
  }

  if (currentTime - startTime >= anInterval) {

    stateAnimationThree += 1;
    if (stateAnimationThree >= 2) {

      stateAnimationThree = 0;
    }
    startTime = millis();
  }


  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
    FastLED.clear();

    if (state > 11) {
      state = 0;
    }
    return;
  }
}

void animationFour() {

  static int stateAnimationThree = 0;
  static unsigned long startTime = millis();
  unsigned long currentTime = millis();
  //for (int passtime = 0; passtime < 8; passtime++) {  // Display it 8 times
  switch (stateAnimationThree) {
    case 0:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(PIG01[i]));
      }
      FastLED.show();
      break;



    case 1:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(PIG02[i]));
      }
      FastLED.show();
      break;
  }

  if (currentTime - startTime >= anInterval) {

    stateAnimationThree += 1;
    if (stateAnimationThree >= 2) {

      stateAnimationThree = 0;
    }
    startTime = millis();
  }


  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
    FastLED.clear();

    if (state > 11) {
      state = 0;
    }
    return;
  }
}

void animationFive() {

  static int stateAnimationThree = 0;
  static unsigned long startTime = millis();
  unsigned long currentTime = millis();
  //for (int passtime = 0; passtime < 8; passtime++) {  // Display it 8 times
  switch (stateAnimationThree) {
    case 0:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(CHRISTMAS01[i]));
      }
      FastLED.show();
      break;



    case 1:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(CHRISTMAS02[i]));
      }
      FastLED.show();
      break;
  }

  if (currentTime - startTime >= anInterval) {

    stateAnimationThree += 1;
    if (stateAnimationThree >= 2) {

      stateAnimationThree = 0;
    }
    startTime = millis();
  }


  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
    FastLED.clear();

    if (state > 11) {
      state = 0;
    }
    return;
  }
}

void animationSix() {

  static int stateAnimationThree = 0;
  static unsigned long startTime = millis();
  unsigned long currentTime = millis();
  //for (int passtime = 0; passtime < 8; passtime++) {  // Display it 8 times
  switch (stateAnimationThree) {
    case 0:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(SYMBOL01[i]));
      }
      FastLED.show();
      break;



    case 1:
      FastLED.clear();
      for (int i = 0; i < NUM_LEDS; i++) {
        leds[i] = pgm_read_dword(&(SYMBOL02[i]));
      }
      FastLED.show();
      break;
  }

  if (currentTime - startTime >= anInterval) {

    stateAnimationThree += 1;
    if (stateAnimationThree >= 2) {

      stateAnimationThree = 0;
    }
    startTime = millis();
  }


  previousState = currentState;
  currentState = debounce(buttonPin, previousState);

  if (currentState == true && previousState == false) {
    state++;
    FastLED.clear();

    if (state > 11) {
      state = 0;
    }
    return;
  }
}

void rainbowLines() {
  static uint8_t hue = 0;
  // Serial.print("x");
  // First slide the led in one direction
  for (int i = 0; i < NUM_LEDS; i++) {
    // Set the i'th led to red
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show();
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(10);

    previousState = currentState;
    currentState = debounce(buttonPin, previousState);

    if (currentState == true && previousState == false) {
      state++;
      if (state > 11) {
        state = 0;
      }
      return;
    }
  }
  // Serial.print("x");

  // Now go in the other direction.
  for (int i = (NUM_LEDS)-1; i >= 0; i--) {
    // Set the i'th led to red
    leds[i] = CHSV(hue++, 255, 255);
    // Show the leds
    FastLED.show();
    // now that we've shown the leds, reset the i'th led to black
    // leds[i] = CRGB::Black;
    fadeall();
    // Wait a little bit before we loop around and do it again
    delay(10);

    previousState = currentState;
    currentState = debounce(buttonPin, previousState);

    if (currentState == true && previousState == false) {
      state++;
      if (state > 11) {
        state = 0;
      }
      return;
    }
  }
}


boolean debounce(int aButtonPin, boolean aPrevState) {
  boolean currentState = digitalRead(aButtonPin);

  if (currentState == HIGH && aPrevState == LOW) {
    delay(20);
  }

  return currentState;
}
